// =================================================================================================
// Code.gs Êï¥ÂêàË£ú‰∏Å - 2025-08-04
// Â∞áÂÑ™ÂåñÁâàÂäüËÉΩÊï¥ÂêàÂà∞ÁèæÊúâÁöÑ Code.gs Á≥ªÁµ±‰∏≠
// =================================================================================================

/**
 * üîó Â∞áÂÑ™ÂåñÁâàÂäüËÉΩÊï¥ÂêàÂà∞ÁèæÊúâÁ≥ªÁµ±
 * Âú® Code.gs Êñá‰ª∂Êú´Â∞æÊ∑ªÂä†‰ª•‰∏ã‰ª£Á¢º
 */

// =================================================================================================
// „ÄêV47.4 Êñ∞Â¢û„ÄëÂÑ™ÂåñÁâà Email ËôïÁêÜÊï¥Âêà
// =================================================================================================

/**
 * üéØ ÂÑ™ÂåñÁâà Email Rules ËôïÁêÜÂô®ÔºàÊï¥ÂêàÂà∞ Code.gsÔºâ
 * ÂåÖÂê´Êô∫ËÉΩÂàÜÈ°û„ÄÅÁ≤æÁ¢∫Êó•Êúü„ÄÅÈáçË§áÊ™¢Ê∏¨ÂäüËÉΩ
 */
function processReceiptsByEmailRulesOptimized() {
  return withPhase4ErrorHandling(() => {
    Logger.log('üéØ ÂÑ™ÂåñÁâàÂÆåÊï¥ÁöÑ Email Rules ËôïÁêÜÂô®ÂïüÂãï...');
    
    try {
      const emailRules = [
        {
          query: 'from:no_reply@email.apple.com subject:ÁôºÁ•®ÈÄöÁü• is:unread',
          type: 'Apple',
          processor: 'processAppleInvoiceOptimized',
          needsAttachment: false
        },
        {
          query: 'from:payments-noreply@google.com subject:Êáâ‰ªòÊÜëÊìö is:unread',
          type: 'Google',
          processor: 'processGooglePaymentOptimized',
          needsAttachment: true,
          attachmentType: 'PDF'
        },
        {
          query: 'from:invoice@cht.com.tw subject:ÈõªÂ≠êÁôºÁ•® is:unread',
          type: 'CHT',
          processor: 'processCHTInvoiceOptimized',
          needsAttachment: true,
          attachmentType: 'HTML'
        },
        {
          query: 'from:einvoice@einvoice.nat.gov.tw subject:ÂΩôÊï¥ is:unread',
          type: 'Government',
          processor: 'processGovernmentInvoiceOptimized',
          needsAttachment: true,
          attachmentType: 'CSV'
        }
      ];
      
      let totalProcessed = 0;
      let totalSkipped = 0;
      let processedMessageIds = new Set();
      
      emailRules.forEach((rule, index) => {
        Logger.log(`\nüîç ËôïÁêÜË¶èÂâá ${index + 1}/${emailRules.length}: ${rule.type}`);
        Logger.log(`üìß ÊêúÂ∞ãÊ¢ù‰ª∂: ${rule.query}`);
        
        try {
          const threads = GmailApp.search(rule.query, 0, 3);
          Logger.log(`ÊâæÂà∞ ${threads.length} ÂÄãÈÉµ‰ª∂‰∏≤`);
          
          threads.forEach(thread => {
            const messages = thread.getMessages();
            
            messages.forEach(message => {
              const messageId = message.getId();
              
              if (processedMessageIds.has(messageId)) {
                Logger.log(`‚è≠Ô∏è Ë∑≥ÈÅéÂ∑≤ËôïÁêÜÁöÑÈÉµ‰ª∂: ${messageId}`);
                return;
              }
              
              if (message.isUnread()) {
                Logger.log(`üì® ËôïÁêÜÈÉµ‰ª∂: ${message.getSubject()}`);
                
                try {
                  const results = processEmailOptimized(message, rule);
                  
                  if (results) {
                    let recordsToSave = [];
                    
                    if (Array.isArray(results)) {
                      recordsToSave = results;
                    } else if (results.amount > 0) {
                      recordsToSave = [results];
                    }
                    
                    if (recordsToSave.length > 0) {
                      saveEmailRecordsOptimized(recordsToSave, message);
                      totalProcessed += recordsToSave.length;
                      Logger.log(`‚úÖ ËôïÁêÜ‰∫Ü ${recordsToSave.length} Á≠ÜË®òÈåÑ`);
                    } else {
                      totalSkipped++;
                      Logger.log('‚è≠Ô∏è ÊâÄÊúâË®òÈåÑÈÉΩÊòØÈáçË§áÔºåÂ∑≤Ë∑≥ÈÅé');
                    }
                    
                    Utilities.sleep(500);
                    message.markRead();
                    Logger.log('‚úÖ ÈÉµ‰ª∂Â∑≤Ê®ôË®òÁÇ∫Â∑≤ËÆÄ');
                    
                    processedMessageIds.add(messageId);
                    Logger.log('‚úÖ ÈÉµ‰ª∂ËôïÁêÜÂÆåÊàê');
                  } else {
                    Logger.log('‚ö†Ô∏è ÈÉµ‰ª∂Ëß£ÊûêÂ§±ÊïóÔºåË∑≥ÈÅé');
                  }
                } catch (emailError) {
                  Logger.log(`‚ùå ËôïÁêÜÈÉµ‰ª∂Â§±Êïó: ${emailError.toString()}`);
                }
              }
            });
          });
          
        } catch (ruleError) {
          Logger.log(`‚ùå ËôïÁêÜË¶èÂâáÂ§±Êïó: ${ruleError.toString()}`);
        }
      });
      
      Logger.log(`\n‚úÖ ÂÑ™ÂåñÁâàËôïÁêÜÂÆåÊàê`);
      Logger.log(`üìä Êñ∞Â¢ûË®òÈåÑ: ${totalProcessed} Á≠Ü`);
      Logger.log(`‚è≠Ô∏è Ë∑≥ÈÅéÈáçË§á: ${totalSkipped} Á≠Ü`);
      Logger.log(`üéØ ÈáçË§áÊ™¢Ê∏¨ÂíåÊô∫ËÉΩÂàÜÈ°ûÂ∑≤ÂïüÁî®`);
      
    } catch (error) {
      Logger.log(`‚ùå ÂÑ™ÂåñÁâàËôïÁêÜÂ§±Êïó: ${error.toString()}`);
    }
  }, {}, 'processReceiptsByEmailRulesOptimized');
}

/**
 * üìß ÂÑ™ÂåñÁâàÈÉµ‰ª∂ËôïÁêÜÈÇèËºØ
 */
function processEmailOptimized(message, rule) {
  try {
    Logger.log(`üîç ÈñãÂßãËôïÁêÜ ${rule.type} ÈÉµ‰ª∂`);
    
    let result = {
      date: Utilities.formatDate(message.getDate(), Session.getScriptTimeZone(), 'yyyy-MM-dd'),
      amount: 0,
      currency: 'TWD',
      category: 'ÂÖ∂‰ªñ',
      description: message.getSubject(),
      merchant: '',
      invoiceNumber: '',
      source: 'Email : ÈõªÂ≠êÊî∂Êìö'
    };
    
    // Ê†πÊìö‰∏çÂêåÈ°ûÂûã‰ΩøÁî®Â∞çÊáâÁöÑËôïÁêÜÈÇèËºØ
    switch (rule.type) {
      case 'Apple':
        result = processAppleInvoiceOptimized(message, result);
        break;
      case 'Google':
        result = processGooglePaymentOptimized(message, result);
        break;
      case 'CHT':
        result = processCHTInvoiceOptimized(message, result);
        break;
      case 'Government':
        return processGovernmentInvoiceOptimized(message, result); // ËøîÂõûÈô£Âàó
      default:
        Logger.log(`‚ö†Ô∏è Êú™Áü•ÁöÑÈÉµ‰ª∂È°ûÂûã: ${rule.type}`);
        break;
    }
    
    return validateResultOptimized(result);
    
  } catch (error) {
    Logger.log(`‚ùå ÈÉµ‰ª∂ËôïÁêÜÂ§±Êïó: ${error.toString()}`);
    return null;
  }
}

/**
 * üíæ ÂÑ™ÂåñÁâàË®òÈåÑÂÑ≤Â≠òÔºà‰ΩøÁî®ÁèæÊúâÁöÑ Code.gs ÁµêÊßãÔºâ
 */
function saveEmailRecordsOptimized(records, message) {
  try {
    const ss = SpreadsheetApp.openById(MAIN_LEDGER_ID);
    const sheet = ss.getSheetByName(SHEET_NAME);
    
    records.forEach((data, index) => {
      const exchangeRate = data.currency === 'TWD' ? 1 : (data.currency === 'USD' ? 31.5 : 1);
      
      const newRow = [
        data.date,                           // A: TIMESTAMP
        data.amount,                         // B: AMOUNT
        data.currency,                       // C: CURRENCY
        exchangeRate,                        // D: EXCHANGE RATE
        '',                                  // E: Amount (TWD) - Áî±ÂÖ¨ÂºèË®àÁÆó
        data.category,                       // F: CATEGORY
        data.description,                    // G: ITEM
        'ÁßÅ‰∫∫',                              // H: ACCOUNT TYPE
        '',                                  // I: Linked_IOU_EventID
        data.invoiceNumber || '',            // J: INVOICE NO.
        '',                                  // K: REFERENCES NO.
        '',                                  // L: BUYER NAME
        '',                                  // M: BUYER TAX ID
        '',                                  // N: SELLER TAX ID
        '',                                  // O: RECEIPT IMAGE
        'Â∑≤Á¢∫Ë™ç',                            // P: STATUS
        data.source,                         // Q: SOURCE
        '',                                  // R: NOTES
        message.getSubject(),                // S: Original Text (OCR)
        '',                                  // T: Translation (AI)
        JSON.stringify({                     // U: META_DATA
          messageId: message.getId(),
          sender: message.getFrom(),
          receivedDate: message.getDate().toISOString(),
          merchant: data.merchant,
          processedAt: new Date().toISOString(),
          processor: 'Optimized Integration V1.0',
          recordIndex: index + 1,
          totalRecords: records.length,
          originalData: data.originalData || {}
        })
      ];
      
      sheet.appendRow(newRow);
      Logger.log(`üíæ Ë®òÈåÑ ${index + 1} Â∑≤ÂÑ≤Â≠ò: ${data.amount} ${data.currency} - ${data.description}`);
    });
    
  } catch (error) {
    Logger.log(`‚ùå ÂÑ≤Â≠òË®òÈåÑÂ§±Êïó: ${error.toString()}`);
    throw error;
  }
}

/**
 * ‚úÖ ÁµêÊûúÈ©óË≠âÔºàÂÑ™ÂåñÁâàÔºâ
 */
function validateResultOptimized(result) {
  if (!result || isNaN(result.amount) || result.amount <= 0) {
    return null;
  }
  
  const validCurrencies = ['TWD', 'USD', 'JPY', 'EUR'];
  if (!validCurrencies.includes(result.currency)) {
    result.currency = 'TWD';
  }
  
  const validCategories = ['È£ü', 'Ë°£', '‰Ωè', 'Ë°å', 'ËÇ≤', 'Ê®Ç', 'ÈÜ´ÁôÇ', '‰øùÈö™', 'ÂÖ∂‰ªñ'];
  if (!validCategories.includes(result.category)) {
    result.category = 'ÂÖ∂‰ªñ';
  }
  
  return result;
}

// =================================================================================================
// „ÄêÊï¥ÂêàË™™Êòé„ÄëÂ¶Ç‰ΩïÂ∞áÂÑ™ÂåñÁâàÂäüËÉΩÂä†ÂÖ• Code.gs
// =================================================================================================

/*
Ë¶ÅÂ∞áÂÑ™ÂåñÁâàÂäüËÉΩÊï¥ÂêàÂà∞ÁèæÊúâÁöÑ Code.gs ‰∏≠ÔºåË´ãÊåâÁÖß‰ª•‰∏ãÊ≠•È©üÔºö

1. „ÄêË§áË£ΩÊô∫ËÉΩÂàÜÈ°ûÂô®„Äë
   Â∞á Email_Rules_Based_Processor.gs ‰∏≠ÁöÑ SmartCategoryClassifier È°ûÂà•
   Ë§áË£ΩÂà∞ Code.gs Êñá‰ª∂Êú´Â∞æ

2. „ÄêË§áË£ΩÊó•ÊúüËôïÁêÜÂô®„Äë
   Â∞á SmartDateProcessor È°ûÂà•Ë§áË£ΩÂà∞ Code.gs Êñá‰ª∂Êú´Â∞æ

3. „ÄêË§áË£ΩÈáçË§áÊ™¢Ê∏¨Âô®„Äë
   Â∞á DuplicateDetector È°ûÂà•Ë§áË£ΩÂà∞ Code.gs Êñá‰ª∂Êú´Â∞æ

4. „ÄêË§áË£ΩËôïÁêÜÂáΩÊï∏„Äë
   Â∞á‰ª•‰∏ãÂáΩÊï∏Ë§áË£ΩÂà∞ Code.gs Êñá‰ª∂Êú´Â∞æÔºö
   - processAppleInvoiceOptimized (‰ΩøÁî®ÁèæÊúâÁöÑ processAppleInvoiceFinal)
   - processGooglePaymentOptimized (‰ΩøÁî®ÁèæÊúâÁöÑ processGooglePaymentFinal)
   - processCHTInvoiceOptimized (‰ΩøÁî®ÁèæÊúâÁöÑ processCHTInvoiceFinal)
   - processGovernmentInvoiceOptimized (‰ΩøÁî®ÂÑ™ÂåñÁâà)

5. „ÄêÊõ¥Êñ∞Ëß∏ÁôºÂô®„Äë
   Ëß∏ÁôºÂô®Â∑≤Á∂ìË®≠ÂÆöÁÇ∫‰ΩøÁî® processReceiptsByEmailRulesOptimized

ÈÄôÊ®£Â∞±ËÉΩÂú®‰øùÊåÅÁèæÊúâÂäüËÉΩÁöÑÂêåÊôÇÔºåÊ∑ªÂä†ÂÑ™ÂåñÁâàÁöÑÊô∫ËÉΩÂàÜÈ°ûÂíåÈáçË§áÊ™¢Ê∏¨ÂäüËÉΩ„ÄÇ
*/